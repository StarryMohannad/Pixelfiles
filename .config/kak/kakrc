# Width of a tab
set-option global tabstop 4

# Indent with 4 spaces
set-option global indentwidth 4

# Always keep one line and three columns displayed around the cursor
set-option global scrolloff 1,3

# Display the status bar on top
set-option global ui_options ncurses_status_on_top=true

# Display line numbers
add-highlighter global/ number-lines -hlcursor -separator "| " -cursor-separator "> "

# Highlight trailing whitespace
add-highlighter global/ regex \h+$ 0:Error

# Softwrap long lines
add-highlighter global/ wrap -word -indent

# Show Matching
add-highlighter global/ show-matching

# Clipboard management mappings
map -docstring "yank the selection into the system clipboard" global user y "<a-|> xsel -b -i<ret>"
map -docstring "paste the system clipboard" global user p "<a-!> xsel -b<ret>"

# Shortcut to quickly exit the editor
define-command -docstring "save and quit" x "write-all; quit"

# LSP Client
eval %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(html|css|json|rust|python|go|javascript|typescript|c|cpp) %{
    lsp-enable-window
}

# plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

# AutoPairs
plug "alexherbo2/auto-pairs.kak" config %{
  enable-auto-pairs
}

plug "andreyorst/powerline.kak" defer kakoune-themes %{
  powerline-theme default
} config %{
  powerline-start
}

# tabs for autocomplete
hook global InsertCompletionShow .* %{
  try %{
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
    hook -once -always window InsertCompletionHide .* %{
      unmap window insert <tab> <c-n>
      unmap window insert <s-tab> <c-p>
    }
  }
}

# open tutor (needs curl)
define-command  trampoline -docstring "open a tutorial" %{
  evaluate-commands %sh{
    tramp_file=$(mktemp -t "kakoune-trampoline.XXXXXXXX")
    echo "edit -fifo $tramp_file *TRAMPOLINE*"
    curl -s https://raw.githubusercontent.com/mawww/kakoune/master/contrib/TRAMPOLINE -o "$tramp_file"
  }
}

# fancy insert newline
map -docstring "insert newline above" global user [ "O<esc>j"
map -docstring "insert newline below" global user ] "o<esc>k"

# spellcheck (requires aspell)
map -docstring "check document for spelling" global user w ": spell<ret>"
map -docstring "clear document spelling" global user q ": spell-clear<ret>"

# Discord RPC
plug "abuffseagull/kakoune-discord" do %{ cargo install --path . --force } %{
  discord-presence-enable
}
